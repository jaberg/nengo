# NOTE This still has some Java stuff in it, so it will take a bit
#      more effort to fully switch this over to the new system.

def make_white_noise_node(self, name, dimensions=None, base=1, high=10,
                          power=0.5, seed=None):
        """Create and return a node that randomly varies.

        The variation is generated by randomly generating fourier
        components with frequencies that are multiples of ``base``
        up to ``high``, and normalized to have an rms power of ``power``.

        :param str name: name of created node
        :param int or None dimensions:
            dimensionality of the input. If None, will default to the
            longest of any of the lists given in the other parameters,
            or 1 if there are no lists.
        :param float or list of floats base:
            fundamental (lowest) frequency for the fourier series, in Hertz.
            If a list, will use different values for each dimension.
            Default is 1.0 (Hz).
        :param float or list of floats high:
            maximum frequency for the fourier series, in Hertz.
            If a list, will use different values for each dimension.
            Default is 10.0 (Hz).
        :param float or list of floats power:
            RMS power for the random function.
            If a list, will use different values for each dimension.
            Default is 0.5.
        :param int, list of int, or None seed:
            random number seed to use. If a list, will use different
            values for each dimension. If None, a random seed will be chosen.
        :returns: the created Node.

        """
        
        def fix(x):
            if isinstance(x, (tuple, list)):
                return x
            else:
                return [x]

        high = fix(high)
        base = fix(base)
        power = fix(power)
        seed = fix(seed)
        
        if dimensions is None:
            dimensions = max(len(base), len(high), len(power), len(seed))
        
        funcs = []
        for i in range(dimensions):
            s = seed[i % len(seed)]
            if s is None:
                s = random.randint(0,0x7ffffff)
            f = FourierFunction(base[i % len(base)],
                                high[i % len(high)],
                                power[i % len(power)], s)
            funcs.append(f)
            
        parent, name = self._parse_name(name)    
        input = FunctionInput(name, funcs, Units.UNK)
        parent.addNode(input)
        return input
